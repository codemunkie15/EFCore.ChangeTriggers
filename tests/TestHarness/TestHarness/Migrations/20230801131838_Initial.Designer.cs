// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestHarness;

#nullable disable

namespace TestHarness.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230801131838_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestHarness.DbModels.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SubId")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("Reference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SomeEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id", "SubId");

                    b.HasIndex("SomeEntityId");

                    b.ToTable("Permissions", null, t =>
                        {
                            t.HasTrigger("ChangeTrackingTrigger");
                        });

                    b
                        .HasAnnotation("ChangeTrackingTriggers:ChangeEntityTypeName", "TestHarness.DbModels.Permissions.PermissionChange")
                        .HasAnnotation("ChangeTrackingTriggers:TriggerNameFormat", "CustomTriggerName_{0}")
                        .HasAnnotation("ChangeTrackingTriggers:Use", true);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubId = 1,
                            Enabled = false,
                            Name = "Permission 1",
                            Order = 0,
                            Reference = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("TestHarness.DbModels.Permissions.PermissionChange", b =>
                {
                    b.Property<int>("ChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeId"));

                    b.Property<DateTimeOffset>("ChangedAt")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("ChangeTrackingTriggers:IsChangeContextColumn", true)
                        .HasAnnotation("ChangeTrackingTriggers:IsChangedAtColumn", true);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationType")
                        .HasColumnType("int")
                        .HasColumnName("OperationTypeId")
                        .HasAnnotation("ChangeTrackingTriggers:IsChangeContextColumn", true)
                        .HasAnnotation("ChangeTrackingTriggers:IsOperationTypeColumn", true);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("Reference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SomeEntityId")
                        .HasColumnType("int");

                    b.Property<int>("SubId")
                        .HasColumnType("int");

                    b.HasKey("ChangeId");

                    b.HasIndex("SomeEntityId");

                    b.HasIndex("Id", "SubId");

                    b.ToTable("PermissionChanges", (string)null);

                    b.HasAnnotation("ChangeTrackingTriggers:TrackedEntityTypeName", "TestHarness.DbModels.Permissions.Permission");
                });

            modelBuilder.Entity("TestHarness.DbModels.SomeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SomeEntity");
                });

            modelBuilder.Entity("TestHarness.DbModels.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasTrigger("ChangeTrackingTrigger")
                                .HasDatabaseName("ChangeTrackingTrigger1");
                        });

                    b
                        .HasAnnotation("ChangeTrackingTriggers:ChangeEntityTypeName", "TestHarness.DbModels.Users.UserChange")
                        .HasAnnotation("ChangeTrackingTriggers:Use", true);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = "01/01/2000",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("TestHarness.DbModels.Users.UserChange", b =>
                {
                    b.Property<int>("ChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeId"));

                    b.Property<int>("ChangeSource")
                        .HasColumnType("int")
                        .HasAnnotation("ChangeTrackingTriggers:IsChangeContextColumn", true)
                        .HasAnnotation("ChangeTrackingTriggers:IsChangeSourceColumn", true);

                    b.Property<DateTimeOffset>("ChangedAt")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("ChangeTrackingTriggers:IsChangeContextColumn", true)
                        .HasAnnotation("ChangeTrackingTriggers:IsChangedAtColumn", true);

                    b.Property<int>("ChangedById")
                        .HasColumnType("int");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationType")
                        .HasColumnType("int")
                        .HasColumnName("OperationTypeId")
                        .HasAnnotation("ChangeTrackingTriggers:IsChangeContextColumn", true)
                        .HasAnnotation("ChangeTrackingTriggers:IsOperationTypeColumn", true);

                    b.HasKey("ChangeId");

                    b.HasIndex("ChangedById");

                    b.HasIndex("Id");

                    b.ToTable("UserChanges", (string)null);

                    b.HasAnnotation("ChangeTrackingTriggers:TrackedEntityTypeName", "TestHarness.DbModels.Users.User");
                });

            modelBuilder.Entity("TestHarness.DbModels.Permissions.Permission", b =>
                {
                    b.HasOne("TestHarness.DbModels.SomeEntity", "SomeEntity")
                        .WithMany()
                        .HasForeignKey("SomeEntityId");

                    b.Navigation("SomeEntity");
                });

            modelBuilder.Entity("TestHarness.DbModels.Permissions.PermissionChange", b =>
                {
                    b.HasOne("TestHarness.DbModels.SomeEntity", "SomeEntity")
                        .WithMany()
                        .HasForeignKey("SomeEntityId");

                    b.HasOne("TestHarness.DbModels.Permissions.Permission", "TrackedEntity")
                        .WithMany("Changes")
                        .HasForeignKey("Id", "SubId")
                        .HasAnnotation("ChangeTrackingTriggers:HasNoCheckConstraint", true);

                    b.Navigation("SomeEntity");

                    b.Navigation("TrackedEntity");
                });

            modelBuilder.Entity("TestHarness.DbModels.Users.UserChange", b =>
                {
                    b.HasOne("TestHarness.DbModels.Users.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .HasAnnotation("ChangeTrackingTriggers:HasNoCheckConstraint", true)
                        .HasAnnotation("ChangeTrackingTriggers:IsChangeContextColumn", true)
                        .HasAnnotation("ChangeTrackingTriggers:IsChangedByColumn", true);

                    b.HasOne("TestHarness.DbModels.Users.User", "TrackedEntity")
                        .WithMany("Changes")
                        .HasForeignKey("Id")
                        .HasAnnotation("ChangeTrackingTriggers:HasNoCheckConstraint", true);

                    b.Navigation("ChangedBy");

                    b.Navigation("TrackedEntity");
                });

            modelBuilder.Entity("TestHarness.DbModels.Permissions.Permission", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("TestHarness.DbModels.Users.User", b =>
                {
                    b.Navigation("Changes");
                });
#pragma warning restore 612, 618
        }
    }
}
